using Google.Protobuf;
@{
    // Utility functions for code generation
    string GetOpcodeParser(Google.Protobuf.Reflection.DescriptorProto proto)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        GetOpcodeParserSub(sb, proto);
        return sb.ToString();
    }
    void GetOpcodeParserSub(System.Text.StringBuilder sb, Google.Protobuf.Reflection.DescriptorProto proto)
    {	
        if(Model.TryGetOptionValue(proto, 54321, out int msgId))
        {
           sb.AppendLine($"                case {msgId}:");
           sb.AppendLine($"                    msg = new {Model.GetMessageTypeName(proto)}();");
           sb.AppendLine("                    break;");
        }
        foreach(var i in proto.NestedTypes)
        {
           GetOpcodeParserSub(sb, i);
        }

    }
}
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
// </auto-generated>
@if(!string.IsNullOrEmpty(@Model.Files.DefaultPackage))
{
@:namespace @Model.Files.DefaultPackage
}
{	
    public abstract class MessageBase
    {
        public virtual int MessageId => 0;

        public abstract void MergeFrom(CodedInputStream input);
        public abstract void WriteTo(CodedOutputStream output);        

        protected int memoizedSerializedSize = -1;
        public int SerializedSize 
        {
            get 
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
            }
        }

        protected abstract int CalcSerializedSize();
    }

    public static class MessageParser
    {
        public static MessageBase ParseMessage(int opcode, System.IO.Stream stream)
        {
            MessageBase msg = null;
            switch(opcode)
            {
                @foreach(var i in Model.Files.Files)
                {
                    @foreach(var type in i.MessageTypes)
                    {
                        string content = GetOpcodeParser(type);
                        @if(!string.IsNullOrEmpty(content))
                        {
@:@Raw(content)
                        }
                    }
                }
            }
            if(msg == null)
            {
                throw new System.Exception($"Unknown opcode:{opcode}");
            }
            CodedInputStream input = new CodedInputStream(stream);
            msg.MergeFrom(input);
            return msg;
        }
    }
}